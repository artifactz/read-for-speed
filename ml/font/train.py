import json, random, collections
from PIL import Image
from pathlib import Path
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as T
from torch.utils.data import Dataset, DataLoader
from tqdm import tqdm
import util.tile_image


class FontsDataset(Dataset):
    def __init__(self, folder, augment_negative=0.0):
        """
        Initializes the dataset by loading images and labels from a folder generated by extract.generate_training_data.
        """
        self.images = []
        self.labels = []
        file_paths = []

        for path, folders, files in Path(folder).walk():
            for file in files:
                if not file.endswith(".png"):
                    continue
                file_paths.append(path / file)

        classes = {}
        for file in tqdm(file_paths, desc="Loading images"):
            for img in util.tile_image.read_tile_image(file):
                t = img_to_tensor(img)

                self.images.append(t)
                class_name = file.parent.parent.name
                if class_name not in classes:
                    classes[class_name] = len(classes)
                label = classes[class_name]
                self.labels.append(label)
                if random.random() < augment_negative:
                    self.images.append(-t)
                    self.labels.append(label)

        classes = {v: k for k, v in classes.items()}
        self.classes = [classes[i] for i in range(len(classes))]

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        return self.images[idx], self.labels[idx]

    def get_stats(self):
        label_counter = collections.Counter(self.labels)
        class_labels = {self.classes[index]: count for index, count in label_counter.items()}
        return {"class_labels": class_labels}


def img_to_tensor(img: Image.Image) -> torch.Tensor:
    t = T.ToTensor()(img)
    t = 2 * (1 - t) - 1  # invert and map from [0, 1] to [-1, 1]
    return t


class Net(nn.Module):
    def __init__(self, classes: list[str]):
        """
        :param classes: must match the number of subfolders in the training data folder
        """
        super().__init__()
        self.classes = classes
        self.net = nn.Sequential(
            nn.Conv2d(1, 8, 5),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(8, 16, 5),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(16, 32, 5),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(32, 64, 5),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Flatten(),
            nn.Linear(1024, 341),
            nn.ReLU(),
            nn.Linear(341, 113),
            nn.ReLU(),
            nn.Linear(113, len(classes)),
        )

    def forward(self, x):
        return self.net(x)


def train_model(model: Net, dataloader: DataLoader, epochs: int = 10, device=None):
    if device:
        model.to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    model.train()
    for epoch in range(epochs):
        total_loss = 0
        correct = 0
        total = 0
        for x, y in dataloader:
            optimizer.zero_grad()
            if device:
                x = x.to(device)
                y = y.to(device)
            output = model(x)
            loss = criterion(output, y)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()

            preds = output.argmax(dim=1)
            correct += (preds == y).sum().item()
            total += y.size(0)

        print(f"Epoch {epoch+1:02d}: Loss={total_loss:.4f}, Accuracy={correct/total:.2%}")


def test_model(model: Net, samples: list[Image.Image]):
    import matplotlib.pyplot as plt
    tensors = [img_to_tensor(img) for img in samples]
    tensors = torch.stack(tensors)
    with torch.no_grad():
        outputs = model(tensors).cpu().numpy()
        mean = outputs.mean(axis=0)
        predicted = mean.argmax()

        plt.bar(model.classes, mean)
        plt.xticks(rotation=33, horizontalalignment="right")
        plt.title("Font Estimation")
        plt.ylabel("Confidence")
        plt.tight_layout()
        plt.show()

        plt.bar(range(outputs.shape[0]), outputs[:, predicted])
        plt.title(f"{model.classes[predicted]} Estimation")
        plt.xlabel("Sample")
        plt.ylabel("Confidence")
        plt.tight_layout()
        plt.show()


def run_model_test(pdf_path: str, model: Net = None, num_samples: int = 24):
    import os, pdfplumber
    import extract

    if model is None:
        import estimator
        model = estimator.model

    with pdfplumber.open(pdf_path) as pdf:
        primary_font_raw = extract.get_primary_font(pdf)
        samples = list(extract.sample_crops(pdf, primary_font_raw, num_samples))

        # Workaround for a crash due to conflicting OpenMP instances from pytorch and matplotlib
        os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"
        test_model(model, samples)


if __name__ == "__main__":
    dataset = FontsDataset("ml/font/training_data")
    print(dataset.get_stats())

    train_loader = DataLoader(dataset, batch_size=32, shuffle=True)

    model = Net(dataset.classes)
    device = torch.device('cuda:0') if torch.cuda.is_available() else None
    train_model(model, train_loader, 20, device)

    model.to(torch.device('cpu'))
    torch.save(model.state_dict(), "ml/font/model.pth")
    with open("ml/font/classes.json", "w") as f:
        json.dump(dataset.classes, f)

    # run_model_test("samples/encrypted/sample31.pdf")
