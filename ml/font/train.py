import json
from PIL import Image
from pathlib import Path
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as T
from torch.utils.data import Dataset, DataLoader
import matplotlib.pyplot as plt


class FontsDataset(Dataset):
    def __init__(self, folder):
        """
        Initializes the dataset by loading images and labels from a folder generated by extract.generate_training_data.
        """
        self.images = []
        self.labels = []
        classes = {}
        for path, folders, files in Path(folder).walk():
            for file in files:
                if file.endswith(".png"):
                    img = Image.open(path / file)
                    t = img_to_tensor(img)
                    self.images.append(t)
                    class_name = path.parent.name
                    if class_name not in classes:
                        classes[class_name] = len(classes)
                    label = classes[class_name]
                    self.labels.append(label)
        classes = {v: k for k, v in classes.items()}
        self.classes = [classes[i] for i in range(len(classes))]

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        return self.images[idx], self.labels[idx]


def img_to_tensor(img: Image.Image) -> torch.Tensor:
    t = T.ToTensor()(img)
    t = 2 * (1 - t) - 1
    return t


class Net(nn.Module):
    def __init__(self, classes: list[str]):
        """
        :param classes: must match the number of subfolders in the training data folder
        """
        super().__init__()
        self.classes = classes
        self.net = nn.Sequential(
            nn.Conv2d(1, 8, 5),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(8, 16, 5),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(16, 32, 5),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(32, 64, 5),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Flatten(),
            nn.Linear(1024, 341),
            nn.ReLU(),
            nn.Linear(341, 113),
            nn.ReLU(),
            nn.Linear(113, len(classes)),
        )

    def forward(self, x):
        return self.net(x)


def train_model(model: Net, dataloader: DataLoader, epochs: int = 10):
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    model.train()
    for epoch in range(epochs):
        total_loss = 0
        correct = 0
        total = 0
        for x, y in dataloader:
            optimizer.zero_grad()
            output = model(x)
            loss = criterion(output, y)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()

            preds = output.argmax(dim=1)
            correct += (preds == y).sum().item()
            total += y.size(0)

        print(f"Epoch {epoch+1:02d}: Loss={total_loss:.4f}, Accuracy={correct/total:.2%}")


def eval_model(model: Net, dataloader: DataLoader):
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for x, y in dataloader:
            output = model(x)
            preds = output.argmax(dim=1)
            correct += (preds == y).sum().item()
            total += y.size(0)
    return {
        "accuracy": correct / total,
        "total": total,
        "correct": correct,
    }


def test_model(model: Net, samples: list[Image.Image]):
    tensors = [img_to_tensor(img) for img in samples]
    tensors = torch.stack(tensors)
    with torch.no_grad():
        outputs = model(tensors).cpu().numpy()
        mean = outputs.mean(axis=0)
        predicted = mean.argmax()

        plt.bar(model.classes, mean)
        plt.xticks(rotation=33, horizontalalignment="right")
        plt.title("Font Estimation")
        plt.ylabel("Confidence")
        plt.tight_layout()
        plt.show()

        plt.bar(range(outputs.shape[0]), outputs[:, predicted])
        plt.title(f"{model.classes[predicted]} Estimation")
        plt.xlabel("Sample")
        plt.ylabel("Confidence")
        plt.tight_layout()
        plt.show()


def run_model_test(pdf_path: str, model: Net = None, num_samples: int = 24):
    import os, pdfplumber
    import extract

    if model is None:
        import estimator
        model = estimator.model

    with pdfplumber.open(pdf_path) as pdf:
        sampler = extract.CropSampler(pdf)
        samples = list(sampler.sample_iter(num_samples))
        # Workaround for a crash due to conflicting OpenMP instances from pytorch and matplotlib
        os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"
        test_model(model, samples)


if __name__ == "__main__":
    dataset = FontsDataset("ml/font/training_data")
    train_dataset, eval_dataset = torch.utils.data.random_split(dataset, [0.8, 0.2])
    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
    eval_loader = DataLoader(eval_dataset, batch_size=32, shuffle=False)

    model = Net(dataset.classes)
    train_model(model, train_loader, 20)

    torch.save(model.state_dict(), "ml/font/model.pth")
    with open("ml/font/classes.json", "w") as f:
        json.dump(dataset.classes, f)

    eval_results = eval_model(model, eval_loader)
    print(eval_results)

    run_model_test("samples/encrypted/sample31.pdf", model)
